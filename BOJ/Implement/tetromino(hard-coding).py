# BOJ 14500, 테트로미노
import sys
input = sys.stdin.readline

n, m = map(int, input().rstrip().split())
arr = []
for _ in range(n):
    row_data = list(map(int, input().rstrip().split()))
    arr.append(row_data)

figure_arr = [
    [[0,0], [0,1], [0,2], [0,3]], # 테트로미노 1
    [[0,0], [1,0], [2,0], [3,0]], # 테트로미노 1 (회전)
    [[0,0], [0,1], [1,0], [1,1]], # 테트로미노 2
    [[0,0], [1,0], [2,0], [2,1]], # 테트로미노 3
    [[0,2], [1,0], [1,1], [1,2]], # 테트로미노 3 (회전)
    [[0,0], [0,1], [1,1], [2,1]], # 테트로미노 3 (회전)
    [[0,0], [0,1], [0,2], [1,0]], # 테트로미노 3 (회전)
    [[0,1], [1,1], [2,0], [2,1]], # 테트로미노 3 (뒤집기)
    [[0,0], [0,1], [0,2], [1,2]], # 테트로미노 3 (뒤집기)
    [[0,0], [0,1], [1,0], [2,0]], # 테트로미노 3 (뒤집기)
    [[0,0], [1,0], [1,1], [1,2]], # 테트로미노 3 (뒤집기)
    [[0,0], [1,0], [1,1], [2,1]], # 테트로미노 4
    [[0,1], [0,2], [1,0], [1,1]], # 테트로미노 4 (회전)
    [[0,1], [1,0], [1,1], [2,0]], # 테트로미노 4 (뒤집기)
    [[0,0], [0,1], [1,1], [1,2]], # 테트로미노 4 (뒤집기)
    [[0,0], [0,1], [0,2], [1,1]], # 테트로미노 5
    [[0,0], [1,0], [1,1], [2,0]], # 테트로미노 5 (회전)
    [[0,1], [1,0], [1,1], [1,2]], # 테트로미노 5 (회전)
    [[0,1], [1,0], [1,1], [2,1]]  # 테트로미노 5 (회전)
]

# 최댓값을 기록하기 위한 변수
max_val = -1

# 테트로미노 도형을 순회
for figure in figure_arr:

    # 복잡도가 크지 않음으로 이와 같이 맵 전체를 순회하며 크기를 증가시키고, 필요없는 것은 걸러내는 형태로 수행
    for i in range(n):
        for j in range(m):

            # 현재 놓여 있는 도형 위치로부터 숫자들의 합을 구함
            is_out = False
            sum = 0
            for pos in figure:
                # 도형의 위치 변경
                x, y = pos[0] + i, pos[1] + j

                # 만약 하나라도 판을 벗어났다면 해당 위치는 제대로 놓인 것이 아님으로 다음 도형으로 넘어감
                if x < 0 or x >= n or y < 0 or y >= m:
                    is_out = True
                    break

                sum += arr[x][y]

            # 유효한 위치의 도형에 한해, max_val과 비교하여 더 크다면 업데이트
            if not is_out and sum > max_val:
                max_val = sum

print(max_val)